# Reusable workflow that builds the repository's code, executes tests, and then deploys the packages to NuGet when a push is made to the default branch.

name: CI/CD
 
on:
  push:
    branches:  
      - "master"
    paths-ignore:
      - '.github/workflows/**'
      - '!.github/workflows/ci.yml'
  pull_request:
    branches:
      - "master"
  workflow_call:
    inputs:
      release-build:
        required: true
        type: boolean
        default: false
      skip-tests:
        required: false
        type: boolean
        default: false
    outputs:
      build-artifact-name:
        description: Build output artifact name
        value: ${{ jobs.build.outputs.build-artifact-name }}
    secrets:
      REPO_TOKEN:
        required: true
      NUGET_API_KEY:
        required: true

env:
  PACKAGE_CONFIGURATION: 'Package'
  BUILD_ARTIFACT_NAME: 'binaries'
  
jobs:
  build:
    name: Fetch and Build Source
    runs-on: windows-2022
    outputs:
      build-submodule-sha: ${{ steps.submodule-status.outputs.BUILD_SUBMODULE_SHA }}
      build-artifact-name: ${{ env.BUILD_ARTIFACT_NAME }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - name: Get Build Submodule Hash
      id: submodule-status
      run: Write-Output "BUILD_SUBMODULE_SHA=$($(-split $(git submodule status build))[0])" >> $Env:GITHUB_OUTPUT
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2    
    - name: Build
      run: .\build\Invoke-Build.ps1 -ReleaseBuild:$([System.Convert]::ToBoolean($Env:RELEASE_BUILD)) -PackageConfiguration:$Env:PACKAGE_CONFIGURATION
      env:
        RELEASE_BUILD: ${{ inputs.release-build != '' && inputs.release-build || 'false' }}
        PACKAGE_CONFIGURATION: ${{ env.PACKAGE_CONFIGURATION }}
      # Store our compiled assets for subsequent jobs.
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BUILD_ARTIFACT_NAME }}
        path: bin/rel/
    - name: Upload Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/
  test:
    name: Run Unit Tests
    needs: build
    if: inputs.skip-tests != true
    runs-on: windows-2022
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add VSTest to PATH
      uses: darenm/Setup-VSTest@v1.3
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.BUILD_ARTIFACT_NAME }}
        path: bin/rel/
    - name: Execute Test Runner
      run: |
        '<RunSettings><RunConfiguration><TestSessionTimeout>120000</TestSessionTimeout></RunConfiguration></RunSettings>' | Out-File temp.runsettings
        Get-ChildItem bin\rel\*.Tests.dll | `
        ForEach-Object {vstest.console /Settings:temp.runsettings /Logger:trx`;LogFileName="$($_.BaseName).trx" /ResultsDirectory:testResults $_.FullName; if ($LASTEXITCODE -eq 1) {$failWhenDone = $true} }; `
        if ($failWhenDone -eq $true) { exit 1 }
    - name: Upload Test Artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: testResults/
    - name: Generate Report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      with:
        check_name: Unit Test Results
        files: testResults/**/*.trx
  deploy:
    name: Deploy Packages
    needs: [build, test]
    if: always() && github.event_name != 'pull_request'
    runs-on: windows-2022
    steps:
    - name: Check Previous Jobs' Results
      if: needs.build.result != 'success' || (needs.test.result != 'success' && inputs.skip-tests != true)
      run: exit 1
    - name: Checkout Build Submodule
      uses: actions/checkout@v4
      with:
        repository: BadEcho/build
        ref: ${{ needs.build.outputs.build-submodule-sha }}
        path: build        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Download Package Artifact
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: artifacts/
    - name: Push to NuGet
      run: .\build\Publish-Packages.ps1 ${{ secrets.NUGET_API_KEY }}